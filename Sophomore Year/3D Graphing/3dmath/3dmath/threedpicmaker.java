//TODO:clear lines starting with MOVEROTATEZ DONE YEAHimport static java.awt.Color.black;import static java.awt.Color.red;import java.awt.Color;import java.awt.DisplayMode;import java.awt.Graphics;import java.awt.Rectangle;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.awt.event.MouseMotionListener;import java.awt.event.MouseWheelEvent;import java.awt.event.MouseWheelListener;import java.awt.event.WindowEvent;import java.awt.event.WindowListener;import java.util.ArrayList;import java.util.EventListener;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.UIManager;public class threedpicmaker extends JPanel    implements KeyListener, EventListener, MouseListener, MouseMotionListener, MouseWheelListener, WindowListener{	static Runtime qwerty;    public static void main(String args[])    {    	qwerty=Runtime.getRuntime();        threedpicmaker threedpicmaker1 = new threedpicmaker();    }    JFrame frame;    ScreenManager screen;    Displaymodes display; //   Image dbg; //   Image dbg2;  //  Graphics g;  //  Graphics g2;    boolean run;    boolean shift;    boolean zp;    boolean xp;    boolean yp;    boolean pp;    boolean pm;    boolean up;    boolean ct;    boolean down;    boolean left;    boolean right;    boolean mouseb1;    boolean mouseb2;    boolean mouseb3;    boolean dragged;    boolean instruct;    boolean only;    boolean add;    boolean alt;    boolean pd;    boolean pu;    boolean m;    boolean r;    boolean e;    int selectedg;    int countpressed;    int countmouse;    static int lastposition = 1;    static int sizew = 1024;    static int sizeh = 760;    int storex;    int storey;    int cx;    int cy;  //  ScanConverter nothing;    long delay;    long startdelay;    graph gr;    double throwaway;    input st2;    ArrayList<graph> graphs;    ArrayList<loadpic> pics;    ArrayList<Points> selected;    loadpic sload;    graph sgraph;    equationset set;    Tree x;    Tree y;    Tree z;    Tree s;    double a;    double b;    public threedpicmaker()    {    	try		{			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());		} catch (Exception e)		{			e.printStackTrace();		}        frame=new JFrame();        display = new Displaymodes();        shift = false;        zp = false;        xp = false;        yp = false;        pp = false;        pm = false;        up = false;        ct = false;        down = false;        left = false;        right = false;        mouseb1 = false;        mouseb2 = false;        mouseb3 = false;        dragged = false;        instruct = true;        only = false;        add = true;        alt = false;        r = true;        selectedg = 0;        countpressed = 0;        countmouse = 0;        delay = 0L;        startdelay = 0L;        throwaway = variables.settings = Integer.parseInt(JOptionPane.showInputDialog(this, "enter you settings the higher the number the better the settings\nrecomended stettings\nWindows 95-98: 25-75\nWindows XP: 75-110\nWindows Vista 1GB RAM: 110-120\nWindows Vista 2GB RAM or Windows 7: 120-175\nAnything faster: 175+", null));        st2 = new input(this);        graphs = new ArrayList<graph>();        pics = new ArrayList<loadpic>();        selected = new ArrayList<Points>();        set = st2.se;        x = set.getX();        y = set.getY();        z = set.getZ();       // frameInit();        frame.setVisible(false);        frame.setSize(sizew + 10, sizeh + 10);        init2();        sizew = frame.getSize().width;        sizeh = frame.getSize().height;        variables.sizew = sizew;        variables.sizeh = sizeh;        variables.winsize = sizew;        variables.panx = (double)sizew / 2D;        variables.pany = (double)sizeh / 2D;        variables.fpany = variables.pany;        variables.fpanx = variables.panx;     //   nothing = new ScanConverter(new ViewWindow(0, 0, sizew, sizeh, 0.0D));        pics.add((new absolute(set.isregular())).getpic());        setBackground(Color.white);        addKeyListener(this);        addMouseListener(this);        addMouseMotionListener(this);        addMouseWheelListener(this);        frame.addWindowListener(this);        frame.addKeyListener(this);        frame.addMouseListener(this);        frame.addMouseMotionListener(this);        frame.addMouseWheelListener(this);    //    dbg = new BufferedImage(frame.getSize().width, frame.getSize().height, 1);    //    dbg2 = new BufferedImage(frame.getSize().width, frame.getSize().height, 1);    //    g = dbg.getGraphics();    //    g2 = dbg2.getGraphics();        uninit2();        init();        st2 = null;        frame.setDefaultCloseOperation(3);        frame.setContentPane(this);        frame.setVisible(true);        reinit2();        action1();    }    public void hideScreen()    {    	frame.setVisible(false);    	if(screen!=null)    		uninit2();    }    public void showScreen()    {    	frame.setVisible(true);    	if(screen!=null)    		reinit2();    }    public void uninit2()    {        screen.restoreScreen();    }    public void reinit2()    {        DisplayMode displaymode = screen.findFirstCompatibleMode(transfer(NORMAL_MODES));        screen.setFullScreen(displaymode, frame);    }    public void init2()    {        screen = new ScreenManager();        DisplayMode displaymode = screen.findFirstCompatibleMode(transfer(NORMAL_MODES));        screen.setFullScreen(displaymode, frame);    }    public void init()    {        System.out.println("Starting");        graph graph1 = pics.get(0).getgraph(set, st2.in(pics.get(0)), st2.in2(pics.get(0)));        graph1.position = lastposition;        lastposition++;        graphs.add(graph1);        System.out.println("done");    }    @Override    public void paintComponent(Graphics g)    {//    	double memUsed = (double)qwerty.totalMemory();//    	memUsed-=(double)qwerty.freeMemory();//    	memUsed/=(double)qwerty.totalMemory();//    	memUsed*=100.;//    	System.out.println(memUsed);    	try    	{    		run=true;	    	g.setColor(Color.white);	    	g.fillRect(0,0,this.getSize().width, this.getSize().height);	    	int t=pics.size();	    	graph.drawAxis(g);	    	//g.drawRect(0, 0, 2000, 200);	    //	System.out.println("axisis drew");	    	if(!only)	    	{		    	for(int k=0;k<t;k++)		    	{		    		pics.get(k).draw(g);		    	}	    	}else	    	{	    		sload.draw(g);	    	}	    	if(instruct)	    	{	    		help.paint(g,5,24);	    	}	    	if(dragged&&!mouseb2)	    	{		    	g.setColor(red);		    	Rectangle r=new Rectangle(Math.min(cx-5,storex-5),Math.min(storey-24,cy-24),		    	Math.abs(storex-cx),Math.abs(storey-cy));		    	g.drawRect(r.x,r.y,r.width,r.height);		    }	   // 	g2.drawImage(dbg,0,0,this);	    //	g3.drawImage(dbg2,5,24,this);    	}catch(Exception e)    	{    		e.printStackTrace();    	}    //	System.out.println("painting");    	if(pd||pu||m)    	{	   	//	System.out.println("painting "+countpressed+" "+countmouse);    		if(countpressed<100&&pd)    		countpressed++;    		else    			pd=false;    		if(countmouse<100&&m)    		countmouse++;    		else    			m=false;    		pu=false;    		action1();    	}    }    public void action1()    {	    do	    {	    	boolean change=false;	    	boolean t=test();	    	if(t)			{				if(shift)				{					if(yp)					{						change=true;						if(!only)						{							for(int k=0;k<graphs.size();k++)							{								graphs.get(k).backrotatey(0);							//	graphs.get(k).backrotatey();							}						}else						{							sgraph.backrotatey(0);						}					}					if(xp)					{						change=true;						if(!only)						{							for(int k=0;k<graphs.size();k++)							{								graphs.get(k).backrotatex(0);							//	graphs.get(k).backrotatex();							}						}else						{							sgraph.backrotatex(0);						}					}					if(zp)					{						change=true;						if(!only)						{							for(int k=0;k<graphs.size();k++)							{								//graphs.get(k).backrotatez();								graphs.get(k).backrotatez(0);							}						}else						{							sgraph.backrotatez(0);						}					}				}else				{					if(yp)					{						change=true;						if(!only)						{							for(int k=0;k<graphs.size();k++)							{								//graphs.get(k).rotatey();								graphs.get(k).rotatey(0);							}						}else						{							sgraph.rotatey(0);						}					}					if(xp)					{						change=true;						if(!only)						{							for(int k=0;k<graphs.size();k++)							{								//graphs.get(k).rotatex();								graphs.get(k).rotatex(0);							}						}else						{							sgraph.rotatex(0);						}					}					if(zp)					{						change=true;						if(!only)						{							for(int k=0;k<graphs.size();k++)							{							//	graphs.get(k).rotatez();								graphs.get(k).rotatez(0);							}						}else						{							sgraph.rotatez(0);						}					}				}				if(pm)				{					if(!ct)					{						if(!only)						{							for(int k=0;k<graphs.size();k++)							{								graphs.get(k).zoomOut(0);							}						}else						{							sgraph.zoomOut(0);						}					}					if(!only)					{						for(int k=0;k<graphs.size();k++)						{							graph tempg=graphs.get(k);							tempg.zoomOut(0);							tempg.zoomOut(0);							tempg.zoomOut(0);						}					}else					{						sgraph.zoomOut(0);						sgraph.zoomOut(0);						sgraph.zoomOut(0);					}					change=true;				//	System.out.println(variables.panz);				}				else if(pp)				{					if(!ct)					{						if(!only)						{							for(int k=0;k<graphs.size();k++)							{								graphs.get(k).zoomIn(0);							}						}else						{							sgraph.zoomIn(0);						}					}					if(!only)					{						for(int k=0;k<graphs.size();k++)						{							graph tempg=graphs.get(k);							tempg.zoomIn(0);							tempg.zoomIn(0);							tempg.zoomIn(0);						}					}else					{						sgraph.zoomIn(0);						sgraph.zoomIn(0);						sgraph.zoomIn(0);					}					change=true;			//		System.out.println(variables.panz);				}				if(ct)				{					if(up||down)					{						change=true;						if(!only)						{							for(int k=0;k<graphs.size();k++)							{								graphs.get(k).Moveupdown(down,0);							}						}else						{							sgraph.Moveupdown(down,0);						}					}					if(left||right)					{						change=true;						if(!only)						{							for(int k=0;k<graphs.size();k++)							{								graphs.get(k).Moveleftright(right,0);							}						}else						{							sgraph.Moveleftright(right,0);						}					}				}else				{					if(up||down)					{						change=true;						if(!only)						{							for(int k=0;k<graphs.size();k++)							{								graphs.get(k).panupdown(down);							}						}else						{							for(int k=0;k<graphs.size();k++)							{								graph p=graphs.get(k);								if(p.position==selectedg)								{									p.panupdown(down);									k=graphs.size()+1;								}							}						}					}					if(left||right)					{						change=true;						if(!only)						{							for(int k=0;k<graphs.size();k++)							{								graphs.get(k).panleftright(right);							}						}else						{							for(int k=0;k<graphs.size();k++)							{								graph p=graphs.get(k);								if(p.position==selectedg)								{									p.panleftright(right);									k=graphs.size()+1;								}							}						}					}				}				if(change)				{					if(!only)					{						for(int k=0;k<graphs.size();k++)						{							graphs.get(k).recalculate();						}					}else					{						sgraph.recalculate();					}					if(dragged)					{						dragging();					}				}				action2();			}	    }while(run);    }    public void action2()    {    //	System.out.println("repaint");    	run=false;    	repaint();    }    public boolean test()    {		long endDelay=System.currentTimeMillis();		if(startdelay+delay<=endDelay)		{			startdelay=System.currentTimeMillis();			return true;		}		else			return false;    }    public void keyPressed(KeyEvent e)    {    	int code=e.getKeyCode();    	if(code==61||code==107)    	{    		pp=true;    	}    	else if(code==45||code==109)    	{    		pm=true;    	}    	if(code==e.VK_X)    	{    		xp=true;    	}    	if(code==e.VK_UP)    	{    		up=true;    	}    	if(code==e.VK_LEFT)    	{    		left=true;    	}    	if(code==e.VK_DOWN)    	{    		down=true;    	}    	if(code==e.VK_RIGHT)    	{    		right=true;    	}    	if(code==e.VK_Y)    	{    		yp=true;    	}    	if(code==e.VK_Z)    	{    		zp=true;    	}    	if(code==e.VK_B)    	{    		for(int k=0;k<graphs.size();k++)    		{    			graphs.get(k).goback(0);    		}    	}    	if(code==e.VK_SHIFT)    	{    		shift=true;    	}    	if(code==e.VK_CONTROL)    	{    		ct=true;    	}    	if(code==e.VK_S&&selected.size()>0)    	{    		Points p=selected.get(0);    		Points p2=selected.get(selected.size()-1);    		a=(p.getfinaly()-p2.getfinaly())/(p.getfinalx()-p2.getfinalx());    		b=a*p.graphx-p.getfinaly();    		String g="";    		if(a<0)    		{    			g=Math.abs(a)+"*-x";    		}else    		{    			g=a+"*x";    		}    		if(b<0)    		{    			g+=""+b;    		}else    		{    			g+="+"+b;    		}    		s=new expressiontree().getTree(g);    		s.set("x",-1000);    		p=new Points(-1000,s.getnum(),0);    		s.set("x",1000);    		p2=new Points(1000,s.getnum(),0);    		Line3d l=new Line3d(p,p2);    	}    	if(code==KeyEvent.VK_ESCAPE)    	{    		System.exit(0);    	}    	if(code==KeyEvent.VK_R)    	{    		graph.first=true;    		this.setVisible(false);    		for(long k=0;k<1000000000;k++);    		threedpicmaker.main(null);    	}    	if(code>=48&&code<=57)    	{    		int s=selectedg;    		selectgraph(s,code-48);    	}    	if(code==KeyEvent.VK_ALT)    	{    		alt=true;    	}    	if(code==KeyEvent.VK_A&&add)    	{    		add();    	}    	if(code==e.VK_ENTER||code==e.VK_TAB) 	  	{    	//	System.out.println(e);    		if(shift)    		{    			if(selectedg<graphs.size())    			{    				selectgraph(selectedg,selectedg+1);    			}else    			{    				selectgraph(selectedg,1);    			}    		}else    		{    			if(selectedg>1)    			{    				selectgraph(selectedg,selectedg-1);    			}else    			{    				selectgraph(selectedg,graphs.size());    			}    		}    	}    	if(code==e.VK_O&&r)    	{    		r=false;    		only=!only;    		if(only)    		{    			int i=getindexof(selectedg);    			if(i>=0)    			graphs.get(i).tempsecond=true;    		}else    		{    			for(int k=0;k<graphs.size();k++)    			{    				graphs.get(k).goback();    			}    			int i=getindexof(selectedg);    			if(i>=0)    			graphs.get(i).tempsecond=false;    		}    	}    	if(code==e.VK_D)    	{    		derive();    	}    	if(code==e.VK_P)    	{    		printout();    	}    	if(code==e.VK_E)    	{    		eular();    	}    	countpressed=0;    	pd=true;    	repaint();    }    public void keyReleased(KeyEvent e)    {    	int code=e.getKeyCode();    	if(code==61||code==107)    	{    		pp=false;    	}    	else if(code==45||code==109)    	{    		pm=false;    	}    	if(code==e.VK_UP)    	{    		up=false;    	}    	if(code==e.VK_LEFT)    	{    		left=false;    	}    	if(code==e.VK_DOWN)    	{    		down=false;    	}    	if(code==e.VK_RIGHT)    	{    		right=false;    	}    	if(code==e.VK_X)    	{    		xp=false;    	}    	if(code==e.VK_Y)    	{    		yp=false;    	}    	if(code==e.VK_Z)    	{    		zp=false;    	}    	if(code==e.VK_SHIFT)    	{    		shift=false;    	}    	if(code==e.VK_CONTROL)    	{    		ct=false;    	}    	if(code==KeyEvent.VK_H)    	{    		instruct=!instruct;    	}    	if(code==KeyEvent.VK_ALT)    	{    		alt=false;    	}    	if(code==KeyEvent.VK_A&&!add)    	{    		add=true;    	}    	if(code==e.VK_O&&!r)    	{    		r=true;    	}    	pu=true;    	repaint();    }    public void keyTyped(KeyEvent e)    {    }    public void mousePressed(MouseEvent e)    {    	if(e.getButton()==3)    	{    		mouseb3=true;    	//	System.out.println(e);    	//	System.out.println("button3 pressed");//rightclick pan    	}else if(e.getButton()==2)    	{    		mouseb2=true;    		for(int k=0;k<graphs.size();k++)    		{    			graph t=graphs.get(k);       			t.line=new Line2D(t.origin.x2d,t.origin.y2d,e.getX(),e.getY());    		}    //		System.out.println(e);    //		System.out.println("button2 pressed");//mousewheel rotate    	}else if(e.getButton()==1)    	{    		mouseb1=true;    		int x=e.getX();    		int y=e.getY();    		if(!dragged)    		{    			storex=x;storey=y;    			pressed();    		}    //		System.out.println(e);    	//	System.out.println("button1 pressed");//leftclick select    	}    }    public void mouseReleased(MouseEvent e)    {    	dragged=false;    	if(e.getButton()==3)    	{    		mouseb3=false;    	//	System.out.println(e);    	//	System.out.println("button3 pressed");//rightclick pan    	}else if(e.getButton()==2)    	{    		mouseb2=false;    //		System.out.println(e);    //		System.out.println("button2 pressed");//mousewheel rotate    	}else if(e.getButton()==1)    	{    		mouseb1=false;    //		System.out.println(e);    	//	System.out.println("button1 pressed");//leftclick select    	}    }    public void mouseEntered(MouseEvent e)    {    }    public void mouseExited(MouseEvent e)    {    }    public void mouseClicked(MouseEvent e)    {    }    public void mouseDragged(MouseEvent e)    {    	dragged=true;    	cx=e.getX();    	cy=e.getY();    //	System.out.println(cx+" currentx "+cy+" cy");    	if(!mouseb2)    		dragging();    	else if(alt&&mouseb2)    		moverotateZ();    	else    		moverotate();    	repaint();    	m=true;    	countmouse=0;    }    public void mouseMoved(MouseEvent e)    {    }    public void mouseWheelMoved(MouseWheelEvent e)    {    	int t=e.getWheelRotation();    	for(int k=0;k<(int)Math.abs(t*10);k++)    	{    		if(t<0)    		{    			for(int q=0;q<graphs.size();q++)    			{    				graphs.get(q).zoomIn(0);    			}    		}else    		{    			for(int q=0;q<graphs.size();q++)    			{    				graphs.get(q).zoomOut(0);    			}    		}    	}    	for(int q=0;q<graphs.size();q++)		{			graphs.get(q).recalculate();		}		m=true;    	countmouse=0;    //	System.out.println(e);    }    public void dragging()    {    	if(graphs.size()<=selectedg)    	{  			selectedg=graphs.size()-1;    	}    	ArrayList<Points> temp;    	temp=graphs.get(selectedg).findPoints(new Rectangle(Math.min(cx-5,storex-5),Math.min(storey-24,cy-24),    	Math.abs(storex-cx),Math.abs(storey-cy)));    	if(selected!=null)    	{    		selected.removeAll(temp);    		for(int k=0;k<selected.size();k++)    		{    			selected.get(k).setColor(Color.black);    		}    	}    	selected=temp;    	temp=null;    	for(int k=0;k<selected.size();k++)    	{    		selected.get(k).setColor(Color.blue);    	}    }    public void pressed()    {    	if(graphs.size()<=selectedg)    	{  			selectedg=graphs.size()-1;    	}    	Points p=graphs.get(selectedg).findPoint(storex-5,storey-24);		if(!ct)		{    		if(p==null&&selected!=null)    		{    			for(int k=0;k<selected.size();k++)    			{    				selected.get(k).setColor(Color.black);    			}    			selected=null;    		}else if(p!=null&&selected==null||!selected.contains(p))    		{    			if(selected!=null)    			{    				for(int k=0;k<selected.size();k++)	    			{	    				selected.get(k).setColor(Color.black);	    			}    			}    			selected=new ArrayList<Points>();    			p.setColor(Color.blue);    			selected.add(p);			}		}else		{			if(p==null)			{			}			else if(selected==null)    		{    			selected=new ArrayList<Points>();    			p.setColor(Color.blue);    			selected.add(p);    		}    		else if(!selected.contains(p))    		{    			p.setColor(Color.blue);    			selected.add(p);			}		}    }    public void moverotateZ()    {    	if(!only)    	{	    	for(int k=0;k<graphs.size();k++)	    	{	    		moverotateZ(graphs.get(k));	    		graphs.get(k).recalculate();	    	}    	}else		{			for(int k=0;k<graphs.size();k++)			{				graph p=graphs.get(k);				if(p.position==selectedg)				{					moverotateZ(p);	    			p.recalculate();					k=graphs.size()+1;				}			}		}    }    public void moverotateZ(graph t)    {    	Line2D temp=new Line2D(t.origin.x2d,t.origin.y2d,cx,cy);    	double a=t.line.getangle(temp);    	//double r;    	for(int k=0;k<Math.abs(a);k++)    	{    		if(a>0)    		{    			t.rotatez(0);    		}else    		{    			t.backrotatez(0);    		}    	}    	double zo=t.line.mag/temp.mag;    	double z2=zo<1?1/zo:zo;    	for(int k=0;k<z2*10;k++)    	{    		if(zo<1)    			t.zoomIn(0);    		else    			t.zoomOut(0);    	}    	t.line=temp;    }    public void moverotate()    {    	if(!only)    	{	    	for(int k=0;k<graphs.size();k++)	    	{	    		moverotate(graphs.get(k));	    		graphs.get(k).recalculate();	    	}    	}else		{			for(int k=0;k<graphs.size();k++)			{				graph p=graphs.get(k);				if(p.position==selectedg)				{					moverotate(p);	    			p.recalculate();					k=graphs.size()+1;				}			}		}    }    public void moverotate(graph t)    {    	Line2D temp=new Line2D(t.origin.x2d,t.origin.y2d,cx,cy);    	Line2D temp2=t.line;    	Line2D temp3=new Line2D(temp2.x,temp2.y,temp.x,temp.y);    	double a=temp2.getangle(temp);    	double d=Math.abs(variables.distance/1000.);    	double x=a*temp3.x/temp2.mag*d;    	double y=a*temp3.y/temp2.mag*d;    	for(int k=0;k<Math.abs(x);k++)    	{    		if(temp3.x>0)    		{    			t.rotatey(0);//roates around y-axis which makes it rotate in an x direction    		}else    		{    			t.backrotatey(0);    		}    	}    	for(int k=0;k<Math.abs(y);k++)    	{    		if(temp3.y>0)    		{    			t.rotatex(0);//same thing but oppisite    		}else    		{    			t.backrotatex(0);    		}    	}    	t.line=temp;    }    public void add()    {    	frame.setVisible(false);    	add=false;//so you dont add extras		st2=new input(this);//makes a new imput		set=st2.se;//equationset		loadpic c=new absolute(set.isregular()).getpic();//loads the pic		pics.add(c);//adss the pc		graph tempg=c.getgraph(set,st2.in(c),st2.in2(c));//gets the graph from the input		st2=null;//makes input null (memory)		tempg.position=lastposition;//makes the graph have a position    	lastposition++;//adds the lastposition    	graphs.add(tempg);//adds it in		for(int k=0;k<graphs.size();k++)//restes the graphs		{			graphs.get(k).goback(0);		}		frame.setVisible(true);    }    public void derive()    {    	st2=new input(this,graphs,false);//makes a new input		set=st2.se;		loadpic c=new absolute(set.isregular()).getpic();		pics.add(c);		graph tempg=c.getgraph(set,st2.in(c),st2.in2(c));		st2=null;		tempg.position=lastposition;    	lastposition++;    	graphs.add(tempg);		for(int k=0;k<graphs.size();k++)		{			graphs.get(k).goback(0);		}    }    public void printout()    {    	st2=new input(this,graphs,true);//makes a new input    	    }    public void eular()    {    	st2=new input(this,graphs,0);//makes a new input   	    }    protected static final MyDisplayMode[] ALL_MODES=    {    	new MyDisplayMode(new DisplayMode(1280, 1024, 16, 0),"1280 X 1024 16 bit color"),        new MyDisplayMode(new DisplayMode(1280, 1024, 32, 0),"1280 X 1024 32 bit color"),        new MyDisplayMode(new DisplayMode(1280, 1024, 24, 0),"1280 X 1024 24 bit color"),    	new MyDisplayMode(new DisplayMode(1280, 960, 16, 0),"1280 X 960 16 bit color"),        new MyDisplayMode(new DisplayMode(1280, 960, 32, 0),"1280 X 960 32 bit color"),        new MyDisplayMode(new DisplayMode(1280, 960, 24, 0),"1280 X 960 24 bit color"),        new MyDisplayMode(new DisplayMode(1280, 768, 16, 0),"1280 X 768 16 bit color"),        new MyDisplayMode(new DisplayMode(1280, 768, 32, 0),"1280 X 768 32 bit color"),        new MyDisplayMode(new DisplayMode(1280, 768, 24, 0),"1280 X 768 24 bit color"),        new MyDisplayMode(new DisplayMode(1280, 720, 16, 0),"1280 X 720 16 bit color"),        new MyDisplayMode(new DisplayMode(1280, 720, 32, 0),"1280 X 720 32 bit color"),        new MyDisplayMode(new DisplayMode(1280, 720, 24, 0),"1280 X 720 24 bit color"),    	new MyDisplayMode(new DisplayMode(1024, 768, 16, 0),"1024 X 768 16 bit color"),        new MyDisplayMode(new DisplayMode(1024, 768, 32, 0),"1024 X 768 32 bit color"),        new MyDisplayMode(new DisplayMode(1024, 768, 24, 0),"1024 X 768 24 bit color"),        new MyDisplayMode(new DisplayMode(1052, 864, 16, 0),"1052 X 864 16 bit color"),        new MyDisplayMode(new DisplayMode(1052, 864, 32, 0),"1052 X 864 32 bit color"),        new MyDisplayMode(new DisplayMode(1052, 864, 24, 0),"1052 X 864 24 bit color"),        new MyDisplayMode(new DisplayMode(1280, 600, 16, 0),"1280 X 600 16 bit color"),        new MyDisplayMode(new DisplayMode(1280, 600, 32, 0),"1280 X 600 32 bit color"),        new MyDisplayMode(new DisplayMode(1280, 600, 24, 0),"1280 X 600 24 bit color"),        new MyDisplayMode(new DisplayMode(1280, 720, 16, 0),"1280 X 720 16 bit color"),        new MyDisplayMode(new DisplayMode(1280, 720, 32, 0),"1280 X 720 32 bit color"),        new MyDisplayMode(new DisplayMode(1280, 720, 24, 0),"1280 X 720 24 bit color"),    	new MyDisplayMode(new DisplayMode(800, 600, 16, 0),"800 X 600 16 bit color"),        new MyDisplayMode(new DisplayMode(800, 600, 32, 0),"800 X 600 32 bit color"),        new MyDisplayMode(new DisplayMode(800, 600, 24, 0),"800 X 600 24 bit color"),        new MyDisplayMode(new DisplayMode(640, 480, 16, 0),"640 X 480 16 bit color"),        new MyDisplayMode(new DisplayMode(640, 480, 32, 0),"640 X 480 32 bit color"),        new MyDisplayMode(new DisplayMode(640, 480, 24, 0),"640 X 480 24 bit color"),        new MyDisplayMode(new DisplayMode(1024, 768, 16, 0),"1024 X 768 16 bit color"),        new MyDisplayMode(new DisplayMode(1024, 768, 32, 0),"1024 X 768 32 bit color"),        new MyDisplayMode(new DisplayMode(1024, 768, 24, 0),"1024 X 768 24 bit color"),    	new MyDisplayMode(new DisplayMode(640, 480, 16, 0),"640 X 480 16 bit color"),        new MyDisplayMode(new DisplayMode(640, 480, 32, 0),"640 X 480 32 bit color"),        new MyDisplayMode(new DisplayMode(640, 480, 24, 0),"640 X 480 24 bit color"),        new MyDisplayMode(new DisplayMode(800, 600, 16, 0),"800 X 600 16 bit color"),        new MyDisplayMode(new DisplayMode(800, 600, 32, 0),"800 X 600 32 bit color"),        new MyDisplayMode(new DisplayMode(800, 600, 24, 0),"800 X 600 24 bit color"),        new MyDisplayMode(new DisplayMode(1024, 768, 16, 0),"1024 X 768 16 bit color"),        new MyDisplayMode(new DisplayMode(1024, 768, 32, 0),"1024 X 768 32 bit color"),        new MyDisplayMode(new DisplayMode(1024, 768, 24, 0),"1024 X 768 24 bit color"),    	new MyDisplayMode(new DisplayMode(320, 240, 16, 0),"320 X 240 16 bit color"),        new MyDisplayMode(new DisplayMode(400, 300, 16, 0),"400 X 300 16 bit color"),        new MyDisplayMode(new DisplayMode(512, 384, 16, 0),"512 X 384 16 bit color"),        new MyDisplayMode(new DisplayMode(640, 480, 16, 0),"640 X 480 16 bit color"),        new MyDisplayMode(new DisplayMode(800, 600, 16, 0),"800 X 600 16 bit color"),    };    protected static final MyDisplayMode[] NORMAL_MODES=    {        new MyDisplayMode(new DisplayMode(1024, 768, 16, 0),"1024 X 768 16 bit color"),        new MyDisplayMode(new DisplayMode(1024, 768, 32, 0),"1024 X 768 32 bit color"),        new MyDisplayMode(new DisplayMode(1024, 768, 24, 0),"1024 X 768 24 bit color")    };    public DisplayMode[] transfer(MyDisplayMode[] g)    {    	DisplayMode[] temp=new DisplayMode[g.length];    	for(int k=0;k<g.length;k++)    	{    		temp[k]=g[k].getmode();    	}    	return temp;    }    public void selectgraph(int s2,int t2)    {    	if(s2==t2)    		return;    	int s=getindexof(s2);    	int t=getindexof(t2);    	if(s<graphs.size()&&t<graphs.size())		{			if(s>=0)			{				if(only)				{				//	graphs.get(t).goback(0);					graphs.get(s).tempsecond=false;				}				graphs.get(s).setColor(black);			}			if(t>=0)			{				sgraph=graphs.get(t);				sload=pics.get(t);				if(only)				{					sgraph.tempsecond=true;					sgraph.goback(0);				}				sgraph.setColor(new Color(125,125,125));				swap(t,graphs.size()-1);			}			selectedg=t2;		}    }    public void swap(int s,int t)    {    	graph tempg=graphs.get(s);    	loadpic temp=pics.get(s);    	graphs.set(s,graphs.get(t));    	graphs.set(t,tempg);    	pics.set(s,pics.get(t));    	pics.set(t,temp);    }    public int getindexof(int q)    {    	for(int k=0;k<graphs.size();k++)    	{    		if(graphs.get(k).position==q)    			return k;    	}    	return -1;    }	@Override	public void windowOpened(WindowEvent e) {}	@Override	public void windowClosing(WindowEvent e) {}	@Override	public void windowClosed(WindowEvent e) {}	@Override	public void windowIconified(WindowEvent e){uninit2();}	@Override	public void windowDeiconified(WindowEvent e){reinit2();}	@Override	public void windowActivated(WindowEvent e) {}	@Override	public void windowDeactivated(WindowEvent e) {}}class input{	equationset se;	threedpicmaker t;	protected input()	{	}	public input(threedpicmaker t2)	{		t=t2;		t.hideScreen();		String g=JOptionPane.showInputDialog(t,"enter File Name\nList of Example files:\nineq.eq\n"+			"ineq2.eq\nproof.eq\ncoolestever.eq");		if(!g.equals("new"))			se=new absoluteequation(g).geteq();		else			input2();		t.showScreen();	}	public double in(loadpic c)	{		t.hideScreen();		String temp;		if(c instanceof loadplane)		{			temp=JOptionPane.showInputDialog(t,"enter the bound");		}else		{			temp=JOptionPane.showInputDialog(t,"enter the min value");		}		t.showScreen();		return Double.parseDouble(temp);	}	public double in2(loadpic c)	{		t.hideScreen();		String temp;		if(c instanceof loadplane)		{			temp=JOptionPane.showInputDialog(t,"enter the step");		}else		{			temp=JOptionPane.showInputDialog(t,"enter the max value");		}		t.showScreen();		return Double.parseDouble(temp);	}	public void input2()	{		t.hideScreen();		String g=""+JOptionPane.showInputDialog(t,"choose one type","choose one",3,null,		new String[]{"Plane graph","Regular graph"},null);		if(g.equals("Plane graph"))		{			String g2=JOptionPane.showInputDialog(t,"solving for?");			g=JOptionPane.showInputDialog(t,"enter equation");			se=new equationplane(g,g2);			g=JOptionPane.showInputDialog(t,"enter equation");		}else		{			g=JOptionPane.showInputDialog(t,"x=?");			String g2=JOptionPane.showInputDialog(t,"y=?");			String g3=JOptionPane.showInputDialog(t,"z=?");			se=new equationset(g,g2,g3);		}		t.showScreen();	}	public void input2(graph g)	{		t.hideScreen();		Tree t;		derivative d;		String gx,gy,gz;		if(g instanceof graphplane)		{			String g2=JOptionPane.showInputDialog(this.t,"with respect too?");		//	g=JOptionPane.showInputDialog(t,"enter equation",null);			t=((graphplane)g).getTree();			if(t instanceof PieceTree)			{				d=new derivepiece(t,this.t);				d.respectTo(g2);			}else			{				d=new derivative(t,this.t);				d.respectTo(g2);			}			se=new equationplane(d.cleanDerive(),((graphplane)g).getSolve());		}else		{			String g2=gx=JOptionPane.showInputDialog(this.t,"equation X with respect too?");			Tree gtx=g.x;			if(gtx instanceof PieceTree)			{				d=new derivepiece(gtx,this.t);				d.respectTo(g2);			}else			{				d=new derivative(gtx,this.t);				d.respectTo(g2);			}			Tree gty=g.y;			derivative d2;			g2=gy=JOptionPane.showInputDialog(this.t,"equation Y with respect too?");			if(gty instanceof PieceTree)			{				d2=new derivepiece(gty,this.t);				d2.respectTo(g2);			}else			{				d2=new derivative(gty,this.t);				d2.respectTo(g2);			}			derivative d3;			Tree gtz=g.z;			g2=gz=JOptionPane.showInputDialog(this.t,"equation Z with respect too?");			if(gtz instanceof PieceTree)			{				d3=new derivepiece(gtz,this.t);				d3.respectTo(g2);			}else			{				d3=new derivative(gtz,this.t);				d3.respectTo(g2);			}		//	g=JOptionPane.showInputDialog(this.t,"x=?",null);		//	String g2=JOptionPane.showInputDialog(this.t,"y=?",null);		//	String g3=JOptionPane.showInputDialog(this.t,"z=?",null);						String td=gtx.toString2();			if(!gx.equals("none"))			td=d.cleanDerive();			String td2=gty.toString2();			if(!gy.equals("none"))			td2=d2.cleanDerive();			String td3=gtz.toString2();			if(!gz.equals("none"))			td3=d3.cleanDerive();			se=new equationset(td,td2,td3);		}		this.t.showScreen();	}	public input(threedpicmaker t2,ArrayList<graph> g,boolean which)	{		String g2;		t=t2;		t.hideScreen();		if(!which)		{						if(t2.only)			{				int y=JOptionPane.showConfirmDialog(t2,"do want to take the derivative of the graph on the screen?","DERVATIVE",JOptionPane.YES_NO_OPTION);				if(y==0)				{					g2=""+t2.selectedg;				}else				{					g2=JOptionPane.showInputDialog(t2,"insert graph number 1-"+g.size()+"\nthe crurrent graph number is: "+t2.selectedg);				}						}else			{				g2=JOptionPane.showInputDialog(t2,"insert graph number 1-"+g.size());			}			if(g2.equals("new"))				input2();			else			{				int t=Integer.parseInt(g2);				input2(g.get(t-1));			}		}else		{			if(t2.only)			{				int y=JOptionPane.showConfirmDialog(t2,"do want to print out the equation of the graph on the screen?","DERVATIVE",JOptionPane.YES_NO_OPTION);				if(y==0)				{					g2=""+t2.selectedg;				}else				{					g2=JOptionPane.showInputDialog(t2,"insert graph number 1-"+g.size()+"\nthe crurrent graph number is: "+t2.selectedg);				}						}else			{				g2=JOptionPane.showInputDialog(t2,"insert graph number 1-"+g.size());			}			if(g2.equalsIgnoreCase("ALL"))			{				for(int k=0;k<g.size();k++)				{					JOptionPane.showMessageDialog(t2,"The graph number is: "+k+"\nThe equation is:"+g.get(k).printTree(t2));				}			}else			{				JOptionPane.showMessageDialog(t2,"The graph number is: "+g2+"\nThe equation is:"+g.get(Integer.parseInt(g2)-1).printTree(t2));			}		}		t.showScreen();	}	public input(threedpicmaker t2,ArrayList<graph> g,int w)	{		t=t2;		switch(w)		{			case 0: eulars(g);		}	}	public void eulars(ArrayList<graph> g)	{		t.hideScreen();		String g2="";		if(t.only&&g.get(t.selectedg) instanceof graphplane)		{			int y=JOptionPane.showConfirmDialog(t,"do want to use eulars method of the graph on the screen?","EULAR",JOptionPane.YES_NO_OPTION);			if(y==0)			{				g2=""+t.selectedg;			}else			{				g2=JOptionPane.showInputDialog(t,"insert graph number 1-"+g.size()+"\nthe crurrent graph number is: "+t.selectedg);			}					}else		{			g2=JOptionPane.showInputDialog(t,"insert graph number 1-"+g.size());		}		if(g2.equals("new"))		{			input2();			eulars((graphplane)se.getGraph());					}		else		{			int t=Integer.parseInt(g2);			eulars((graphplane)g.get(t-1));		}		t.showScreen();	}	public void eulars(graphplane g)	{		t.hideScreen();		double h=Double.parseDouble(JOptionPane.showInputDialog(t,"enter step"));		double c=Double.parseDouble(JOptionPane.showInputDialog(t,"enter reps"));		double x=Double.parseDouble(JOptionPane.showInputDialog(t,"starting one"));		double y=Double.parseDouble(JOptionPane.showInputDialog(t,"starting two"));		eulars(g,x,y,h,c);		t.showScreen();	}	public void eulars(graphplane g,double x,double y,double h,double c)	{		t.hideScreen();		g.set(x,y);				y+=g.getTree().getnum()*x;		x+=h;		if(c==0)		{			JOptionPane.showMessageDialog(t,"y= "+y);		}else		{			eulars(g,x,y,h,c-1);		}		t.showScreen();	}}/*firstsize: 2601 oldsize: 891 new size: 891firstsize: 891 oldsize: 486 new size: 486firstsize: 486 oldsize: 285 new size: 285firstsize: 285 oldsize: 13160 new size: 13160firstsize: 13160 oldsize: 6952 new size: 6926//26firstsize: 6926 oldsize: 3704 new size: 3692//12firstsize: 3692 oldsize: 2298 new size: 2292//6firstsize: 2292 oldsize: 1430 new size: 1427//3firstsize: 1427 oldsize: 1040 new size: 1039//1firstsize: 1039 oldsize: 741 new size: 740//1//error*///2263//1662//1386